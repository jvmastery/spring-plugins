plugins {
    id 'java-library'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'maven-publish'
    id 'signing' // 应用签名插件
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    // 版本配置
    group = 'cn.springhub'
    version = '1.0.0-RELEASE'

    // 通用编译配置
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
   //     withJavadocJar()
        withSourcesJar()
    }

    tasks.jar {
        // 移除默认的 `-plain` 后缀，否则maven项目无法正常下载依赖
        archiveClassifier.set('')
    }

    plugins.withId('org.springframework.boot') {
        tasks.named('bootJar') {
            enabled = false // 如果子模块是 Starter，禁用 bootJar
        }

        tasks.named('jar') {
            enabled = true
        }
    }

    // 仓库配置
    repositories {
    		maven { url "https://maven.aliyun.com/repository/public" }
    		mavenLocal()
    		mavenCentral()
    }

    // 使用 dependencyManagement 管理依赖的版本

    dependencyManagement {
        imports {

        }
    }

    // 公共依赖管理
    dependencies {
        implementation "com.fasterxml.jackson.core:jackson-databind:2.18.1"
        testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    }

    // 通用发布配置
    publishing {
        publications {
            mavenJava(MavenPublication) {
                //version = project.ext.PROJECT_INFO_VERSION
                from components.java

                pom {
                    name = 'spring plugins'
                    description = 'spring相关工具类'
                    url = 'http://blog.springhub.cn'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'origalom'
                            name = 'AI.'
                            email = 'tigrislover@sina.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/origalom/spring-plugins.git'
                        developerConnection = 'scm:git@github.com:origalom/spring-plugins.git'
                        url = 'https://github.com/origalom/spring-plugins.git'
                    }
                }
            }
        }

        repositories {
            maven {
                name = "local"
                url = uri("D:\\maven\\repository") // 本地仓库
            }

            maven {
                // maven中央库
                name = "OSSRH"
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = findProperty("OSSRHAuthHeaderName")
                    password = findProperty("OSSRHAuthHeaderValue")
                }
            }

            maven {
                name = "aliyun-snapshot"
                url = uri("https://packages.aliyun.com/maven/repository/2005963-snapshot-frHnmh/")
                credentials {
                    username = findProperty("MAVEN_REPO_USER_NAME")
                    password = findProperty("MAVEN_REPO_PASSWORD")
                }
            }

            maven {
                name = "aliyun-release"
                url = uri("https://packages.aliyun.com/5ed5a315d1d1abe63b55e3ee/maven/2005963-release-HwEidZ")
                credentials {
                    username = findProperty("MAVEN_REPO_USER_NAME")
                    password = findProperty("MAVEN_REPO_PASSWORD")
                }
            }
        }
    }
}

// 配置PGP签名
signing {

}

tasks.withType(JavaExec) {
    standardOutput = System.out
    errorOutput = System.err
    ignoreExitValue = true // 避免非零退出码影响构建流程
}

task publishAll {
    dependsOn subprojects*.publish
}
